name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  # ─────────────────────────────────────────────────────────────────────────
  # 1) LINT + SECURITY CHECKS
  # ─────────────────────────────────────────────────────────────────────────
  lint-security:
    name: Lint & Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Lint (includes plugin-security)
        run: npm run lint:ci

  # ─────────────────────────────────────────────────────────────────────────
  # 2) JEST TESTS (UNIT, INTEGRATION, I18N)
  # ─────────────────────────────────────────────────────────────────────────
  jest-tests:
    name: Unit / Integration / i18n Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test:unit

      - name: Run Integration Tests
        run: npm run test:integration

      - name: Run i18n Tests
        run: npm run test:i18n

  # ─────────────────────────────────────────────────────────────────────────
  # 3) BUILD NEXT.JS DOCKER IMAGE
  # ─────────────────────────────────────────────────────────────────────────
  build-nextjs:
    name: Build Next.js Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js Application
        run: npm run build

      - name: Build Docker image
        run: docker build -t frontend-testing-framework:latest .

      - name: Save Docker image as artifact
        run: docker save frontend-testing-framework:latest -o image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  # ─────────────────────────────────────────────────────────────────────────
  # 4) E2E / VISUAL / ACCESSIBILITY TESTS USING DOCKER
  # ─────────────────────────────────────────────────────────────────────────
  e2e-tests:
    name: E2E / Visual / Accessibility Tests
    runs-on: ubuntu-latest
    needs: [build-nextjs]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Run Next.js container
        run: docker run -d --name myapp -p 3000:3000 frontend-testing-framework:latest

      - name: Wait for Next.js to be ready
        run: |
          wget -qO- https://raw.githubusercontent.com/eficode/wait-for/v2.2.3/wait-for | sh -s -- localhost:3000 -- echo "Next.js is up"

      - name: Install dependencies for Cypress tests
        run: npm ci

      - name: Run E2E tests in Chrome
        run: npm run test:e2e:chrome

      - name: Run Visual Regression tests (Initial & Compare)
        if: ${{ matrix.browser == 'chrome' }}
        run: |
          npm run test:visual:initial
          npm run test:visual

      - name: Run Accessibility tests
        if: ${{ matrix.browser == 'chrome' }}
        run: npm run test:accessibility

      - name: Stop and remove Next.js container
        run: docker stop myapp && docker rm myapp

  # ─────────────────────────────────────────────────────────────────────────
  # 5) PERFORMANCE TESTS (LIGHTHOUSE)
  # ─────────────────────────────────────────────────────────────────────────
  performance-tests:
    name: Performance Tests (Lighthouse)
    runs-on: ubuntu-latest
    needs: [build-nextjs]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Run Next.js container for performance tests
        run: docker run -d --name myapp -p 3000:3000 frontend-testing-framework:latest

      - name: Wait for Next.js to be ready
        run: |
          wget -qO- https://raw.githubusercontent.com/eficode/wait-for/v2.2.3/wait-for | sh -s -- localhost:3000 -- echo "Next.js is up"

      - name: Create artifacts directory
        run: mkdir -p ${{ github.workspace }}/tmp/artifacts

      - name: Run Lighthouse Check
        uses: foo-software/lighthouse-check-action@master
        with:
          outputDirectory: ${{ github.workspace }}/tmp/artifacts
          urls: 'http://localhost:3000'

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: ${{ github.workspace }}/tmp/artifacts

      - name: Stop and remove Next.js container
        run: docker stop myapp && docker rm myapp
